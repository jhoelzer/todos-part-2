{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","toggleCompleted","deleteOne","react_default","a","createElement","className","type","onClick","defaultChecked","Component","TodoList","state","todos","todoList","clickedId","event","newTodos","_this","map","todo","id","setState","addTodo","makeId","Math","floor","random","keyCode","slice","newest","userId","target","value","push","filter","deleteAll","_this2","placeholder","onKeyDown","autoFocus","components_TodoItem","key","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db77022e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, toggleCompleted, deleteOne } = this.props;\n\n        return (\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    <input className=\"toggle\" type=\"checkbox\" onClick={toggleCompleted} defaultChecked={completed} />\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={deleteOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem.js';\nimport todoList from '../todos.json';\n\nclass TodoList extends Component {\n    state = { todos: todoList };\n\n    toggleCompleted = clickedId => event => {\n        const newTodos = this.state.todos.map(todo => {\n            if (todo.id === clickedId) {\n                todo.completed = !todo.completed;\n            }\n\n            return todo;\n        });\n\n        this.setState({ todos: newTodos });\n    };\n\n    addTodo = event => {\n        const { todos } = this.state;\n        let makeId = Math.floor(Math.random() * 500000000);\n\n        if (event.keyCode === 13) {\n            let newTodos = todos.slice(0);\n            let newest = {\n                userId: 1,\n                id: makeId,\n                title: event.target.value,\n                completed: false\n            };\n\n            newTodos.push(newest);\n            this.setState({ todos: newTodos });\n            event.target.value = \"\";\n        };\n    };\n\n    deleteOne = clickedId => event => {\n        const newTodos = this.state.todos.filter(todo => {\n            if (todo.id === clickedId) {\n                return false;\n            }\n\n            return true;\n        });\n\n        this.setState({ todos: newTodos });\n    };\n\n    deleteAll = event => {\n        const newTodos = this.state.todos.filter(todo => {\n            if (todo.completed === true) {\n                return false;\n            }\n\n            return true;\n        });\n\n        this.setState({ todos: newTodos });\n    };\n\n    render() {\n        const { todos } = this.state;\n    \n        return (\n            <section className=\"todoapp\">\n                <header className=\"header\">\n                    <h1>Todos</h1>\n                    <input className=\"new-todo\" placeholder=\"What needs doing?\" onKeyDown={this.addTodo} autoFocus />\n                </header>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {todos.map(todo =>\n                            <TodoItem key={todo.id} title={todo.title} completed={todo.completed} toggleCompleted={this.toggleCompleted(todo.id)} deleteOne={this.deleteOne(todo.id)} />\n                        )}\n                    </ul>\n                </section>\n                <footer className=\"footer\">\n                    <span className=\"todo-count\"><strong>0</strong> items(s) left</span>\n                    <button className=\"clear-completed\" onClick={this.deleteAll}>Clear Completed</button>\n                </footer>\n            </section>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport '../index.css';\nimport TodoList from './TodoList.js';\n\nclass App extends Component {\n  render() {\n    return (\n        <TodoList/>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}